
@{
    ViewData["Title"] = "Main";
}

<h2>Main</h2>
<div>

    <h2>문자출력</h2>
    @ViewData["text"]

   

    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <!-- Or if you want a more recent canary version -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/hls.js@canary"></script> -->

    <div id="text"></div>
    <video id="video" autoplay con  width="640" height="480"></video>
    <script>
        var video = document.getElementById('video');
        if (Hls.isSupported()) {
            var text = document.getElementById('text');
            text.append("hls supported  ");
            var hls = new Hls();
            hls.loadSource('/media/ttest.m3u8');
            hls.attachMedia(video);
            hls.on(Hls.Events.MANIFEST_PARSED, function () {
                text.append("hls play  ");
                const promise = video.play();
                if (promise !== undefined) {
                    promise.then(_ => {
                        video.play();
                    }).catch(error => {
                        // Autoplay was prevented.
                        text.append("hls exception  ");
                    });
                }
            });
        }
        // hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.
        // When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element throught the `src` property.
        // This is using the built-in support of the plain video element, without using hls.js.
        // Note: it would be more normal to wait on the 'canplay' event below however on Safari (where you are most likely to find built-in HLS support) the video.src URL must be on the user-driven
        // white-list before a 'canplay' event will be emitted; the last video event that can be reliably listened-for when the URL is not on the white-list is 'loadedmetadata'.
        else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            text.append("canPlay application/vnd.apple.mpegurl  ");
            video.src = '/media/ttest.m3u8';
            video.addEventListener('loadedmetadata', function () {
                video.play();
            });
        }
    </script>

    @*<video id="video2" controls  width="320" height="240"></video>
    <script>
        var video = document.getElementById('video2');
        if (Hls.isSupported()) {
            text.append("hls supported2  ");
            var hls = new Hls();
            hls.loadSource('/media/hlstest.m3u8');
            hls.attachMedia(video);
            hls.on(Hls.Events.MANIFEST_PARSED, function () {
                text.append("hls play  ");
                const promise = video.play();
                if (promise !== undefined) {
                    promise.then(_ => {
                        video.play();
                    }).catch(error => {
                        // Autoplay was prevented.
                        text.append("hls exception  ");
                    });
                }
            });
        }
        // hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.
        // When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element throught the `src` property.
        // This is using the built-in support of the plain video element, without using hls.js.
        // Note: it would be more normal to wait on the 'canplay' event below however on Safari (where you are most likely to find built-in HLS support) the video.src URL must be on the user-driven
        // white-list before a 'canplay' event will be emitted; the last video event that can be reliably listened-for when the URL is not on the white-list is 'loadedmetadata'.
        else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            text.append("canPlay application/vnd.apple.mpegurl  ");
            video.src = '/media/hlstest.m3u8';
            video.addEventListener('loadedmetadata', function () {
                video.play();
            });
        }
    </script>*@
</div>


